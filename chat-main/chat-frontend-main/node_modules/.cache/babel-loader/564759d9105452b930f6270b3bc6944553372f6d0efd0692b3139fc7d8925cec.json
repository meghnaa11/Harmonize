{"ast":null,"code":"import axios from './Axios';\nconst checkAvailability = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.post('/users/checkAvailability', data);\n      resolve(response.data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst register = async data => {\n  console.log(\"!haha\");\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.post('/register', data);\n      resolve(response.data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst login = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.post('/login', data);\n      resolve(response.data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst changeLoginStatus = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.post('/users/changeStatus', data);\n      resolve(response.data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst createRoom = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.post('/rooms/new', data);\n      resolve(response.data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst joinRoom = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.post('/rooms/join', data);\n      resolve(response.data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst leaveRoom = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.post('/rooms/leave', data);\n      resolve(response.data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst getRooms = async () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.get('/rooms');\n      resolve(response.data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst deleteRoom = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.post('/rooms/delete', data);\n      resolve(response.data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst getMessages = async data => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await axios.post('/messages', data);\n      resolve(response.data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nconst chatHttp = {\n  checkAvailability,\n  changeLoginStatus,\n  register,\n  login,\n  createRoom,\n  joinRoom,\n  leaveRoom,\n  getRooms,\n  getMessages,\n  deleteRoom\n};\nexport default chatHttp;","map":{"version":3,"names":["axios","checkAvailability","data","Promise","resolve","reject","response","post","error","register","console","log","login","changeLoginStatus","createRoom","joinRoom","leaveRoom","getRooms","get","deleteRoom","getMessages","chatHttp"],"sources":["/media/tina/0ED49F87D49F7027/1_SIT_2024Fall/CS554/project/chat-frontend-main/src/services/Http.ts"],"sourcesContent":["import {\n\tCredAvailabilityData,\n\tRegisterData,\n\tLoginData,\n\tLoginStatusData,\n\tNewRoomData,\n\tRoomData,\n\tCredAvailabilityResp,\n\tBaseResponse,\n\tLoginResp,\n\tUserResp,\n\tRoomResp,\n\tRoomsResp,\n\tMessagesResp\n} from './../types';\nimport axios from './Axios';\n\nconst checkAvailability = async (data: CredAvailabilityData) => {\n\treturn new Promise<CredAvailabilityResp>(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await axios.post('/users/checkAvailability', data);\n\t\t\tresolve(response.data);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};\n\nconst register = async (data: RegisterData) => {\n\tconsole.log(\"!haha\")\n\treturn new Promise<BaseResponse>(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await axios.post('/register', data);\n\t\t\tresolve(response.data);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};\n\nconst login = async (data: LoginData) => {\n\treturn new Promise<LoginResp>(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await axios.post('/login', data);\n\t\t\tresolve(response.data);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};\n\nconst changeLoginStatus = async (data: LoginStatusData) => {\n\treturn new Promise<UserResp>(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await axios.post('/users/changeStatus', data);\n\t\t\tresolve(response.data);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};\n\nconst createRoom = async (data: NewRoomData) => {\n\treturn new Promise<RoomResp>(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await axios.post('/rooms/new', data);\n\t\t\tresolve(response.data);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};\n\nconst joinRoom = async (data: RoomData) => {\n\treturn new Promise<RoomResp>(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await axios.post('/rooms/join', data);\n\t\t\tresolve(response.data);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};\n\nconst leaveRoom = async (data: RoomData) => {\n\treturn new Promise<BaseResponse>(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await axios.post('/rooms/leave', data);\n\t\t\tresolve(response.data);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};\n\nconst getRooms = async () => {\n\treturn new Promise<RoomsResp>(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await axios.get('/rooms');\n\t\t\tresolve(response.data);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};\n\nconst deleteRoom = async (data: RoomData) => {\n\treturn new Promise<BaseResponse>(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await axios.post('/rooms/delete', data);\n\t\t\tresolve(response.data);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};\n\nconst getMessages = async (data: RoomData) => {\n\treturn new Promise<MessagesResp>(async (resolve, reject) => {\n\t\ttry {\n\t\t\tconst response = await axios.post('/messages', data);\n\t\t\tresolve(response.data);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};\n\nconst chatHttp = {\n\tcheckAvailability,\n\tchangeLoginStatus,\n\tregister,\n\tlogin,\n\tcreateRoom,\n\tjoinRoom,\n\tleaveRoom,\n\tgetRooms,\n\tgetMessages,\n\tdeleteRoom\n};\n\nexport default chatHttp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}