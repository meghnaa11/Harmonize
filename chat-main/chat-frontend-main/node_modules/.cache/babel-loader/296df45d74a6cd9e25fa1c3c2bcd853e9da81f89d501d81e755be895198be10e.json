{"ast":null,"code":"var _jsxFileName = \"/media/tina/0ED49F87D49F7027/1_SIT_2024Fall/CS554/project/chat-main/chat-frontend-main/src/components/Chat/index.tsx\",\n  _s = $RefreshSig$();\nimport { Avatar } from '@material-ui/core';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Scrollbar from 'react-scrollbars-custom';\nimport './style.css';\nimport chatHttp from '../../services/Http';\nimport { parseISO, differenceInCalendarDays, format, formatDistanceToNow } from 'date-fns';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { useChat } from '../../context/ChatContext';\nimport { useUser } from '../../context/UserContext';\nimport ChatHeader from '../ChatHeader';\nimport ChatFooter from '../ChatFooter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  roomCode\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const chatSocket = useChat();\n  const {\n    userDetails\n  } = useUser();\n  const setRef = useCallback(node => {\n    if (node) {\n      node.scrollIntoView({\n        smooth: true\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (chatSocket === null) return;\n    const subscription = chatSocket.onMessage().subscribe(({\n      newMsg,\n      updatedRoom\n    }) => {\n      if (newMsg.roomCode === roomCode) {\n        setMessages(prevMsgs => [...prevMsgs, newMsg]);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [chatSocket, roomCode]);\n  useEffect(() => {\n    chatHttp.getMessages({\n      roomCode\n    }).then(({\n      data\n    }) => {\n      setMessages(prevMsgs => data.messages);\n    }).catch(({\n      response\n    }) => {\n      console.log(response.data);\n    });\n  }, [roomCode]);\n  const formatDate = date => {\n    return differenceInCalendarDays(new Date(), date) > 2 ? format(date, 'EEE MMM d h:m b') : formatDistanceToNow(date, {\n      addSuffix: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n      roomCode: roomCode,\n      messages: messages,\n      formatDate: formatDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat__body\",\n      children: /*#__PURE__*/_jsxDEV(Scrollbar, {\n        className: \"chat__scrollbar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat__main\",\n          children: messages.map(({\n            content,\n            user,\n            createdAt\n          }, i) => {\n            const lastMessage = messages.length - 1 === i;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `chat__block ${userDetails.username === user.username && 'chat__block--sender'} ${user.username === 'Chatbot' && 'chat__block--bot'}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message__block\",\n                children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                  children: user.firstName && user.lastName ? user.firstName.charAt(0) + user.lastName.charAt(0) : /*#__PURE__*/_jsxDEV(PersonIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 82,\n                    columnNumber: 13\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  ref: lastMessage ? setRef : null,\n                  className: \"chat__message\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"header__text chat__person\",\n                    children: userDetails.username === user.username ? 'You' : user.username\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 12\n                  }, this), content]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 11\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"chat__timestamp\",\n                children: formatDate(parseISO(createdAt))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 10\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 9\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ChatFooter, {\n      roomCode: roomCode,\n      loggedInUser: userDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 3\n  }, this);\n};\n_s(Chat, \"AhwypO5Zldel1svAwmE2q8gkN44=\", false, function () {\n  return [useChat, useUser];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["Avatar","React","useState","useEffect","useCallback","Scrollbar","chatHttp","parseISO","differenceInCalendarDays","format","formatDistanceToNow","PersonIcon","useChat","useUser","ChatHeader","ChatFooter","jsxDEV","_jsxDEV","Chat","roomCode","_s","messages","setMessages","chatSocket","userDetails","setRef","node","scrollIntoView","smooth","subscription","onMessage","subscribe","newMsg","updatedRoom","prevMsgs","unsubscribe","getMessages","then","data","catch","response","console","log","formatDate","date","Date","addSuffix","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","content","user","createdAt","i","lastMessage","length","username","firstName","lastName","charAt","ref","loggedInUser","_c","$RefreshReg$"],"sources":["/media/tina/0ED49F87D49F7027/1_SIT_2024Fall/CS554/project/chat-main/chat-frontend-main/src/components/Chat/index.tsx"],"sourcesContent":["import { Avatar } from '@material-ui/core';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Scrollbar from 'react-scrollbars-custom';\nimport './style.css';\nimport { MessagePopulated } from '../../types';\nimport chatHttp from '../../services/Http';\nimport { parseISO, differenceInCalendarDays, format, formatDistanceToNow } from 'date-fns';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { useChat } from '../../context/ChatContext';\nimport { useUser } from '../../context/UserContext';\nimport ChatHeader from '../ChatHeader';\nimport ChatFooter from '../ChatFooter';\n\nexport interface ChatProps {\n\troomCode: string;\n}\n\nconst Chat = ({ roomCode }: ChatProps) => {\n\tconst [ messages, setMessages ] = useState([] as MessagePopulated[]);\n\tconst chatSocket = useChat();\n\tconst { userDetails } = useUser();\n\tconst setRef = useCallback((node) => {\n\t\tif (node) {\n\t\t\tnode.scrollIntoView({ smooth: true });\n\t\t}\n\t}, []);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (chatSocket === null) return;\n\t\t\tconst subscription = chatSocket.onMessage().subscribe(({ newMsg, updatedRoom }) => {\n\t\t\t\tif (newMsg.roomCode === roomCode) {\n\t\t\t\t\tsetMessages((prevMsgs) => [ ...prevMsgs, newMsg ]);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn () => {\n\t\t\t\tsubscription.unsubscribe();\n\t\t\t};\n\t\t},\n\t\t[ chatSocket, roomCode ]\n\t);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tchatHttp\n\t\t\t\t.getMessages({ roomCode })\n\t\t\t\t.then(({ data }) => {\n\t\t\t\t\tsetMessages((prevMsgs) => data.messages);\n\t\t\t\t})\n\t\t\t\t.catch(({ response }) => {\n\t\t\t\t\tconsole.log(response.data);\n\t\t\t\t});\n\t\t},\n\t\t[ roomCode ]\n\t);\n\n\tconst formatDate = (date: Date) => {\n\t\treturn differenceInCalendarDays(new Date(), date) > 2\n\t\t\t? format(date, 'EEE MMM d h:m b')\n\t\t\t: formatDistanceToNow(date, { addSuffix: true });\n\t};\n\n\treturn (\n\t\t<div className=\"chat\">\n\t\t\t<ChatHeader roomCode={roomCode} messages={messages} formatDate={formatDate} />\n\t\t\t<div className=\"chat__body\">\n\t\t\t\t<Scrollbar className=\"chat__scrollbar\">\n\t\t\t\t\t<div className=\"chat__main\">\n\t\t\t\t\t\t{messages.map(({ content, user, createdAt }, i) => {\n\t\t\t\t\t\t\tconst lastMessage = messages.length - 1 === i;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName={`chat__block ${userDetails.username === user.username &&\n\t\t\t\t\t\t\t\t\t\t'chat__block--sender'} ${user.username === 'Chatbot' && 'chat__block--bot'}`}\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"message__block\">\n\t\t\t\t\t\t\t\t\t\t<Avatar>\n\t\t\t\t\t\t\t\t\t\t\t{user.firstName && user.lastName ? (\n\t\t\t\t\t\t\t\t\t\t\t\tuser.firstName.charAt(0) + user.lastName.charAt(0)\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<PersonIcon />\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t\t\t\t\t<p ref={lastMessage ? setRef : null} className=\"chat__message\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"header__text chat__person\">\n\t\t\t\t\t\t\t\t\t\t\t\t{userDetails.username === user.username ? 'You' : user.username}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t{content}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<span className=\"chat__timestamp\">{formatDate(parseISO(createdAt))}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</Scrollbar>\n\t\t\t</div>\n\t\t\t<ChatFooter roomCode={roomCode} loggedInUser={userDetails} />\n\t\t</div>\n\t);\n};\n\nexport default Chat;\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,mBAAmB;AAC1C,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAO,aAAa;AAEpB,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,SAASC,QAAQ,EAAEC,wBAAwB,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,UAAU;AAC1F,OAAOC,UAAU,MAAM,2BAA2B;AAClD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,UAAU,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMvC,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAAEC,QAAQ,EAAEC,WAAW,CAAE,GAAGpB,QAAQ,CAAC,EAAwB,CAAC;EACpE,MAAMqB,UAAU,GAAGX,OAAO,CAAC,CAAC;EAC5B,MAAM;IAAEY;EAAY,CAAC,GAAGX,OAAO,CAAC,CAAC;EACjC,MAAMY,MAAM,GAAGrB,WAAW,CAAEsB,IAAI,IAAK;IACpC,IAAIA,IAAI,EAAE;MACTA,IAAI,CAACC,cAAc,CAAC;QAAEC,MAAM,EAAE;MAAK,CAAC,CAAC;IACtC;EACD,CAAC,EAAE,EAAE,CAAC;EAENzB,SAAS,CACR,MAAM;IACL,IAAIoB,UAAU,KAAK,IAAI,EAAE;IACzB,MAAMM,YAAY,GAAGN,UAAU,CAACO,SAAS,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC;MAAEC,MAAM;MAAEC;IAAY,CAAC,KAAK;MAClF,IAAID,MAAM,CAACb,QAAQ,KAAKA,QAAQ,EAAE;QACjCG,WAAW,CAAEY,QAAQ,IAAK,CAAE,GAAGA,QAAQ,EAAEF,MAAM,CAAE,CAAC;MACnD;IACD,CAAC,CAAC;IACF,OAAO,MAAM;MACZH,YAAY,CAACM,WAAW,CAAC,CAAC;IAC3B,CAAC;EACF,CAAC,EACD,CAAEZ,UAAU,EAAEJ,QAAQ,CACvB,CAAC;EAEDhB,SAAS,CACR,MAAM;IACLG,QAAQ,CACN8B,WAAW,CAAC;MAAEjB;IAAS,CAAC,CAAC,CACzBkB,IAAI,CAAC,CAAC;MAAEC;IAAK,CAAC,KAAK;MACnBhB,WAAW,CAAEY,QAAQ,IAAKI,IAAI,CAACjB,QAAQ,CAAC;IACzC,CAAC,CAAC,CACDkB,KAAK,CAAC,CAAC;MAAEC;IAAS,CAAC,KAAK;MACxBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACF,IAAI,CAAC;IAC3B,CAAC,CAAC;EACJ,CAAC,EACD,CAAEnB,QAAQ,CACX,CAAC;EAED,MAAMwB,UAAU,GAAIC,IAAU,IAAK;IAClC,OAAOpC,wBAAwB,CAAC,IAAIqC,IAAI,CAAC,CAAC,EAAED,IAAI,CAAC,GAAG,CAAC,GAClDnC,MAAM,CAACmC,IAAI,EAAE,iBAAiB,CAAC,GAC/BlC,mBAAmB,CAACkC,IAAI,EAAE;MAAEE,SAAS,EAAE;IAAK,CAAC,CAAC;EAClD,CAAC;EAED,oBACC7B,OAAA;IAAK8B,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACpB/B,OAAA,CAACH,UAAU;MAACK,QAAQ,EAAEA,QAAS;MAACE,QAAQ,EAAEA,QAAS;MAACsB,UAAU,EAAEA;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9EnC,OAAA;MAAK8B,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC1B/B,OAAA,CAACZ,SAAS;QAAC0C,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eACrC/B,OAAA;UAAK8B,SAAS,EAAC,YAAY;UAAAC,QAAA,EACzB3B,QAAQ,CAACgC,GAAG,CAAC,CAAC;YAAEC,OAAO;YAAEC,IAAI;YAAEC;UAAU,CAAC,EAAEC,CAAC,KAAK;YAClD,MAAMC,WAAW,GAAGrC,QAAQ,CAACsC,MAAM,GAAG,CAAC,KAAKF,CAAC;YAC7C,oBACCxC,OAAA;cACC8B,SAAS,EAAE,eAAevB,WAAW,CAACoC,QAAQ,KAAKL,IAAI,CAACK,QAAQ,IAC/D,qBAAqB,IAAIL,IAAI,CAACK,QAAQ,KAAK,SAAS,IAAI,kBAAkB,EAAG;cAAAZ,QAAA,gBAG9E/B,OAAA;gBAAK8B,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,gBAC9B/B,OAAA,CAACjB,MAAM;kBAAAgD,QAAA,EACLO,IAAI,CAACM,SAAS,IAAIN,IAAI,CAACO,QAAQ,GAC/BP,IAAI,CAACM,SAAS,CAACE,MAAM,CAAC,CAAC,CAAC,GAAGR,IAAI,CAACO,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,gBAElD9C,OAAA,CAACN,UAAU;oBAAAsC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE;gBACb;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACM,CAAC,eACTnC,OAAA;kBAAG+C,GAAG,EAAEN,WAAW,GAAGjC,MAAM,GAAG,IAAK;kBAACsB,SAAS,EAAC,eAAe;kBAAAC,QAAA,gBAC7D/B,OAAA;oBAAM8B,SAAS,EAAC,2BAA2B;oBAAAC,QAAA,EACzCxB,WAAW,CAACoC,QAAQ,KAAKL,IAAI,CAACK,QAAQ,GAAG,KAAK,GAAGL,IAAI,CAACK;kBAAQ;oBAAAX,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC1D,CAAC,EACNE,OAAO;gBAAA;kBAAAL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACN,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACA,CAAC,eACNnC,OAAA;gBAAM8B,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,EAAEL,UAAU,CAACpC,QAAQ,CAACiD,SAAS,CAAC;cAAC;gBAAAP,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC;YAAA,GAjBrEK,CAAC;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAkBF,CAAC;UAER,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eACNnC,OAAA,CAACF,UAAU;MAACI,QAAQ,EAAEA,QAAS;MAAC8C,YAAY,EAAEzC;IAAY;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAER,CAAC;AAAChC,EAAA,CApFIF,IAAI;EAAA,QAEUN,OAAO,EACFC,OAAO;AAAA;AAAAqD,EAAA,GAH1BhD,IAAI;AAsFV,eAAeA,IAAI;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}